// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication1.Database;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(StudentDbContext))]
    partial class StudentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.AcademicDegree", b =>
                {
                    b.Property<int>("AcademicDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("academic_degree_id")
                        .HasComment("Идентификатор записи научной степени");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AcademicDegreeId"));

                    b.Property<string>("AcademicDegreeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("c_academic_degree_name")
                        .HasComment("Название научной степени");

                    b.HasKey("AcademicDegreeId")
                        .HasName("pk_cd_academic_degree_academic_degree_id");

                    b.ToTable("cd_academic_degree", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("department_id")
                        .HasComment("Идентификатор записи кафедры");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateTime>("DepartmentCreationDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("c_department_creation_date")
                        .HasComment("Дата основания кафедры");

                    b.Property<string>("DepartmentMainProfessor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("c_department_main_professor")
                        .HasComment("Старший преподаватель кафедры");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("c_department_name")
                        .HasComment("Название кафедры");

                    b.Property<int>("DepartmentProfessorsAmount")
                        .HasColumnType("INT")
                        .HasColumnName("c_department_professors_amount")
                        .HasComment("Количество профессоров");

                    b.HasKey("DepartmentId")
                        .HasName("pk_cd_department_department_id");

                    b.ToTable("cd_department", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("discipline_id")
                        .HasComment("Идентификатор записи дисциплины");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DisciplineId"));

                    b.Property<string>("DisciplineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("c_discipline_name")
                        .HasComment("Название дисциплины");

                    b.HasKey("DisciplineId")
                        .HasName("pk_cd_discipline_discipline_id");

                    b.ToTable("cd_discipline", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("post_id")
                        .HasComment("Идентификатор записи должности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PostId"));

                    b.Property<string>("PostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("c_post_name")
                        .HasComment("Название должности");

                    b.HasKey("PostId")
                        .HasName("pk_cd_post_post_id");

                    b.ToTable("cd_post", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Professor", b =>
                {
                    b.Property<int>("ProfessorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("professor_id")
                        .HasComment("Идентификатор записи профессора");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProfessorId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("f_department_id")
                        .HasComment("ID кафедры");

                    b.Property<string>("ProfessorFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("c_professor_first_name")
                        .HasComment("Имя профессора");

                    b.Property<string>("ProfessorLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("c_professor_last_name")
                        .HasComment("Фамилия профессора");

                    b.Property<string>("ProfessorMiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("c_professor_middle_name")
                        .HasComment("Отчество профессора");

                    b.Property<string>("ProfessorTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("c_professor_title")
                        .HasComment("Должность профессора");

                    b.HasKey("ProfessorId")
                        .HasName("pk_cd_professor_professor_id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("cd_professor", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.WorkTime", b =>
                {
                    b.Property<int>("WorkTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("work_time_id")
                        .HasComment("Идентификатор записи рабочего времени");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkTimeId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("f_department_id")
                        .HasComment("ID кафедры");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("integer")
                        .HasColumnName("f_discipline_id")
                        .HasComment("ID дисциплины");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("integer")
                        .HasColumnName("f_professor_id")
                        .HasComment("ID профессора");

                    b.Property<int>("WorkTimeHours")
                        .HasColumnType("INT")
                        .HasColumnName("c_work_time_hours")
                        .HasComment("Количество часов");

                    b.HasKey("WorkTimeId")
                        .HasName("pk_cd_work_time_work_time_id");

                    b.HasIndex(new[] { "DepartmentId" }, "idx+cd_work_time_fk_f_department_id");

                    b.HasIndex(new[] { "DisciplineId" }, "idx+cd_work_time_fk_f_discipline_id");

                    b.HasIndex(new[] { "ProfessorId" }, "idx+cd_work_time_fk_f_professor_id");

                    b.ToTable("cd_work_time", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Professor", b =>
                {
                    b.HasOne("WebApplication1.Models.Department", "Department")
                        .WithMany("Professors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("WebApplication1.Models.WorkTime", b =>
                {
                    b.HasOne("WebApplication1.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Discipline");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("WebApplication1.Models.Department", b =>
                {
                    b.Navigation("Professors");
                });
#pragma warning restore 612, 618
        }
    }
}
